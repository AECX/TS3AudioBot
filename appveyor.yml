version: appveyor-{branch}-{build}
branches:
  only:
    - master
    - develop
image: Visual Studio 2019
configuration: Release
clone_depth: 99999
init:
  - pwsh: |-
     dotnet --version;
clone_script:
- pwsh: |
    git clone -q --recursive --branch=$env:APPVEYOR_REPO_BRANCH https://github.com/$env:APPVEYOR_REPO_NAME.git $env:APPVEYOR_BUILD_FOLDER
    git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
    git fetch
    git checkout -qf master
    git checkout -qf $env:APPVEYOR_REPO_COMMIT
environment:
  UPLOAD_TOKEN:
    secure: wQTHAXf9NMII8m8gga6cVnA/yE6PCW5jzOppF7jgUlM=
cache:
  - '%USERPROFILE%\.nuget\packages'
  - WebInterface\node_modules -> WebInterface\package.json
before_build:
- pwsh: |-
    nuget restore
build:
  parallel: true
  verbosity: minimal
after_build:
- pwsh: |-
    dotnet publish TS3AudioBot -c Release --framework netcoreapp3.1
    $targets_linux = "linux-x64", "linux-arm", "linux-arm64"
    $targets = $targets_linux + "win-x64"
    foreach ($target in $targets) {
      dotnet publish TS3AudioBot -c Release --framework netcoreapp3.1 --self-contained --runtime $target -p:PublishSingleFile=true,IncludeSymbolsInSingleFile=true,PublishTrimmed=true
    }
deploy_script:
- pwsh: |-
    Install-Module Microsoft.PowerShell.Archive -MinimumVersion 1.2.3.0 -Repository PSGallery -Force

    if(${env:UPLOAD_TOKEN}) {
      $rel = [io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "TS3AudioBot", "bin", "Release")
      cd([io.path]::combine(${rel}, "netcoreapp3.1"))
      (dotnet .\TS3AudioBot.dll -V | Out-String) -match "Version: (?<version>[-_\d\w\.]+)"
      $ver = $matches['version']
      echo "Current version: ${ver}"

      cd([io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "WebInterface"))
      npm install
      npm run build
      $dst = [io.path]::combine(${rel}, "WebInterface")
      Copy-Item "./dist" -Destination $dst -Recurse

      Write-Host -ForegroundColor Yellow Publishing dotnet core 3.1
      cd([io.path]::combine(${rel}, "netcoreapp3.1", "publish"))
      Compress-Archive -Path *.*,lib,../../WebInterface -DestinationPath TS3AudioBot.zip
      Invoke-RestMethod -Uri "https://splamy.de/api/nightly/ts3ab/${env:APPVEYOR_REPO_BRANCH}?filename=TS3AudioBot.zip&commit=${env:APPVEYOR_REPO_COMMIT}&version=${ver}" -Headers @{ "Content-Type" = "application/zip"; "Authorization" = "${env:UPLOAD_TOKEN}" } -Method Put -InFile .\TS3AudioBot.zip

      Write-Host -ForegroundColor Yellow Publishing win-x64
      cd([io.path]::combine(${rel}, "netcoreapp3.1", "win-x64", "publish"))
      Compress-Archive -Path TS3AudioBot.exe,../../../WebInterface -DestinationPath TS3AudioBot.zip
      Invoke-RestMethod -Uri "https://splamy.de/api/nightly/ts3ab/${env:APPVEYOR_REPO_BRANCH}_win_x64?filename=TS3AudioBot.zip&commit=${env:APPVEYOR_REPO_COMMIT}&version=${ver}" -Headers @{ "Content-Type" = "application/zip"; "Authorization" = "${env:UPLOAD_TOKEN}" } -Method Put -InFile .\TS3AudioBot.zip
      
      $script = cd([io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "Tools", "pack_linux.csx"))

      foreach ($target in $targets_linux) {
        Write-Host -ForegroundColor Yellow Publishing $target
        cd([io.path]::combine(${rel}, "netcoreapp3.1", $target, "publish"))
        # creates TS3AudioBot.tar.gz
        dotnet script $script
        $name = $target -replace '-','_'
        Invoke-RestMethod -Uri "https://splamy.de/api/nightly/ts3ab/${env:APPVEYOR_REPO_BRANCH}_${name}?filename=TS3AudioBot.tar.gz&commit=${env:APPVEYOR_REPO_COMMIT}&version=${ver}" -Headers @{ "Content-Type" = "application/gzip"; "Authorization" = "${env:UPLOAD_TOKEN}" } -Method Put -InFile .\TS3AudioBot.tar.gz
      }
    }
on_success:
- pwsh: |-
    & ([io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "Tools", "ts3notify.ps1")) 1
on_failure:
- pwsh: |-
    & ([io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "Tools", "ts3notify.ps1")) 0
