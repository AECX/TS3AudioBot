// TS3Client - A free TeamSpeak3 client implementation
// Copyright (C) 2017  TS3Client contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />

<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var types = new (string alias, string backing)[] {
	("Uid", "string"),
	("ClientDbId", "ulong"),
	("ClientId", "ushort"),
	("ChannelId", "ulong"),
	("ServerGroupId", "ulong"),
	("ChannelGroupId", "ulong"),
	//("IconHash", "int"),
	//("ConnectionId", "uint"),
};
#>
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace TS3Client
{
	<# foreach(var type in types) {
		var isStr = type.backing == "string"; #>
	[StructLayout(LayoutKind.Sequential, Pack=0)]
	[DebuggerDisplay("{Value, nq}")]
	public readonly partial struct <#= type.alias #> :<#= isStr ? "" : " IFormattable," #> IEquatable<<#= type.alias #>>
	{
		public static readonly <#= type.alias #> Null = default;
		public static <#= type.alias #> To(<#= type.backing #> v) => new <#= type.alias #>(v);

		public <#= type.backing #> Value { get; }
		public <#= type.alias #>(<#= type.backing #> value) { if (value == null) throw new ArgumentNullException(nameof(value)); Value = value; }
		public static explicit operator <#= type.alias #>(<#= type.backing #> v) => new <#= type.alias #>(v);
		public static bool operator ==(<#= type.alias #> a, <#= type.alias #> b) => a.Value == b.Value;
		public static bool operator !=(<#= type.alias #> a, <#= type.alias #> b) => a.Value != b.Value;
		public override int GetHashCode() => Value.GetHashCode();
		public override bool Equals(object obj) => obj is <#= type.alias #> c && Value.Equals(c.Value);
		public override string ToString() => Value.ToString();
		<# if (isStr) { #>
		public bool Equals(<#= type.alias #> other) => Value.Equals(other.Value, StringComparison.Ordinal);
		<# } else { #>
		public bool Equals(<#= type.alias #> other) => Value.Equals(other.Value);
		public string ToString(string format, IFormatProvider formatProvider) => Value.ToString(format, formatProvider);
		<# } #>
	}
	<# } #>
}