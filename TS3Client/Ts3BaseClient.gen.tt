// TS3Client - A free TeamSpeak3 client implementation
// Copyright (C) 2017  TS3Client contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />

<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Threading.Tasks;
using TS3Client.Commands;
using TS3Client.Messages;

namespace TS3Client
{
	partial class Ts3BaseFunctions
	{
<#
	foreach(var isAsync in new[]{ false, true })
	foreach(var isHybrid in new[]{ false, true })
	foreach(var hasReturn in new[]{ "dict", "T", "void" })
	{
		if (isHybrid && hasReturn == "void") continue;

		Func<string, string, string, string> Ret = (a, b, c) => {
			return
			hasReturn == "dict" ? a :
			hasReturn == "T" ? b :
			hasReturn == "void" ? c :
			"!ERR!";
		};

		var retSuffix = Ret("", "", "Void");
		var callTitle = "Send" + retSuffix + (isHybrid ? "Hybrid" : "") + (isAsync ? "Async" : "");
		var retType = Ret(
			"R<ResponseDictionary[], CommandError>",
			"R<T[], CommandError>",
			"E<CommandError>");
		if (isAsync) retType = $"async Task<{retType}>";
		var genMod = Ret("", "<T>", "");
		var genSuffix = Ret("", $" where T : {(isHybrid ? "class, " : "")}IResponse, new()", "");
		var fwdPrefix = isAsync ? "await " : "";
		var fwdModInfix = Ret("<ResponseDictionary>", "<T>", "<ResponseVoid>");
		var fwdTitle = "Send" + (isHybrid ? "Hybrid" : "") + (isAsync ? "Async" : "");
		var fwdSuffix = isAsync ? ".ConfigureAwait(false)" : "";
	foreach(var vparam in new[]{ "cp", "com" })
	{
		if(vparam == "com" && callTitle == fwdTitle) continue;

		Func<string, string, string> Par = (a, b) => {
			return
			vparam == "cp" ? a :
			vparam == "com" ? b :
			"!ERR!";
		};
		var hybridParam = isHybrid ? ", NotificationType type" : "";
		var callParam = Par(
			$"string command{hybridParam}, params ICommandPart[] parameter",
			$"Ts3Command com{hybridParam}");
		var fwdParam = Par(
			$"new Ts3Command(command, parameter)",
			$"com");
		if (isHybrid) fwdParam += ", type";
#>
	/// <summary>
	/// Sends a TS3-command.
	/// <# if(isHybrid) { #>This will send a normal query-command when connected via query client. When connected as a full client the first specified notification is used as the response.<# } #>
	/// <# if(hasReturn == "void") { #>The response (if any) is not deserialized and is discarded.<# } #>
	/// </summary>
	/// <param name="command">The command name.</param>
	/// <param name="parameter">The parameters to be added to this command.
	/// See <see cref="CommandParameter"/>, <see cref="CommandOption"/> or <see cref="CommandMultiParameter"/> for more information.</param>
	/// <# if(isHybrid) { #><param name="type">The notification type to wait for and serialize to when called from the full client.</param><# } #>
	/// <# if(hasReturn == "T") { #><returns>Returns an enumeration of the deserialized and split up in <see cref="T"/> objects data.</returns><# } #>
	public <#= retType #> <#= callTitle #><#= genMod #>(<#= callParam #>)<#= genSuffix #>
		=> <#= fwdPrefix #><#= fwdTitle #><#= fwdModInfix #>(<#= fwdParam #>)<#= fwdSuffix #>;
<# }} #>
	}
}